name: Deploy Homelab

on:
  push:
    branches:
      - master
    paths-ignore:
      - ".github/deployment-marker.txt"

# Add concurrency to cancel in-progress jobs when new commits are pushed
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

# Add permissions to allow pushing to the repository
permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache and install APT packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ansible wireguard resolvconf
          version: 1.0 # Update this when the package list changes

      - name: Get changed services
        id: changed_files
        run: |
          # Fetch all history if needed (will not fail if already complete)
          git fetch --prune || true

          # Get the latest commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT

          # Check if the deployment marker file exists
          LAST_SUCCESS=""
          if [ -f ".github/deployment-marker.txt" ]; then
            LAST_SUCCESS=$(cat .github/deployment-marker.txt)
            echo "Found last successful deployment at commit: $LAST_SUCCESS"
          else
            # If no marker exists, use a more robust fallback strategy
            # First try to find the last successful workflow run
            echo "No deployment marker found, checking for previous successful workflow runs..."
            
            # Get the default branch name
            DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
            
            # Try to find the most recent successful workflow run commit
            # If that fails, go back to the earliest commit in the repository
            LAST_SUCCESS=$(git rev-list --max-parents=0 HEAD)
            echo "::warning::No previous deployment marker found. Using the initial commit as fallback. This may process ALL services in the repository!"
            
            # Count how many services might be affected
            ALL_SERVICES=$(find docker/ -maxdepth 1 -mindepth 1 -type d | cut -d'/' -f2 | wc -l)
            echo "::warning::This could potentially deploy all $ALL_SERVICES services in the repository."
          fi

          echo "Checking changes since commit: $LAST_SUCCESS"

          # Get all changed services since the last successful deployment
          CHANGED=$(git diff --name-only $LAST_SUCCESS HEAD | grep '^docker/' | cut -d'/' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "Changed services: $CHANGED"

          # Safety check: If we're using the initial commit as fallback and too many services would be deployed
          if [ "$LAST_SUCCESS" = "$(git rev-list --max-parents=0 HEAD)" ]; then
            # Count the number of services that would be deployed
            SERVICE_COUNT=$(echo "$CHANGED" | tr ',' '\n' | wc -l)
            # Use environment variable if set, otherwise default to 5
            MAX_SERVICES=${MAX_DEPLOY_SERVICES:-5}
            
            if [ "$SERVICE_COUNT" -gt "$MAX_SERVICES" ]; then
              echo "::warning::Too many services ($SERVICE_COUNT) would be deployed from initial commit. Limiting to $MAX_SERVICES most recently modified services."
              # Get the most recently modified services
              LIMITED_SERVICES=$(find docker/ -maxdepth 1 -mindepth 1 -type d -printf "%T@ %f\n" | sort -nr | head -n $MAX_SERVICES | cut -d' ' -f2- | tr '\n' ',' | sed 's/,$//')
              echo "Limited to services: $LIMITED_SERVICES"
              CHANGED="$LIMITED_SERVICES"
            fi
          fi

          echo "changed_services=$CHANGED" >> $GITHUB_OUTPUT
          echo "CHANGED_SERVICES=$CHANGED" >> $GITHUB_ENV

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Setup WireGuard VPN
        run: |
          sudo mkdir -p /etc/wireguard
          echo "${{ secrets.WIREGUARD_CONFIG }}" | sudo tee /etc/wireguard/wg0.conf > /dev/null
          sudo chmod 600 /etc/wireguard/wg0.conf
          echo "Starting WireGuard..."
          sudo wg-quick up wg0

      - name: Add SSH host keys
        run: |
          # Extract hosts from inventory and add their SSH keys to known_hosts
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts

          # Parse inventory file to get all hosts
          HOSTS=$(grep -oP 'ansible_host=\K[0-9.]+' ansible/inventory.ini)

          # Add each host's SSH key to known_hosts
          for HOST in $HOSTS; do
            echo "Adding host key for $HOST"
            ssh-keyscan -H $HOST >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: Could not get host key for $HOST"
          done

          chmod 600 ~/.ssh/known_hosts

      - name: Run Ansible playbook
        if: steps.changed_files.outputs.changed_services != ''
        run: |
          echo "Deploying changed services: ${{ steps.changed_files.outputs.changed_services }}"
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt

          # Set the environment variable for changed services
          export CHANGED_SERVICES="${{ steps.changed_files.outputs.changed_services }}"

          # Run the playbook with the changed_services variable passed directly
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --vault-password-file vault_pass.txt \
            -e ansible_ssh_private_key_file=~/.ssh/id_rsa

          rm vault_pass.txt

      - name: Skip deployment if no changes
        if: steps.changed_files.outputs.changed_services == ''
        run: echo "No services changed, skipping deploy."

      - name: Update deployment marker
        if: success()
        run: |
          # Create the directory if it doesn't exist
          mkdir -p .github

          # Save the current commit hash as a deployment marker
          echo "${{ steps.changed_files.outputs.current_commit }}" > .github/deployment-marker.txt

          # Commit and push the deployment marker
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .github/deployment-marker.txt
          git commit -m "Update deployment marker [skip ci]"
          git push

          # Create a summary of the deployment
          echo "## Deployment Summary" > $GITHUB_STEP_SUMMARY
          echo "Successfully deployed services: ${{ steps.changed_files.outputs.changed_services || 'none' }}" >> $GITHUB_STEP_SUMMARY
          echo "Deployment marker updated to commit: ${{ steps.changed_files.outputs.current_commit }}" >> $GITHUB_STEP_SUMMARY
