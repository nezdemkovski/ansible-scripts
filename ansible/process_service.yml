- name: Define service paths
  set_fact:
    apps_path: "/home/{{ ansible_user }}/apps/{{ current_service }}"
    appdata_path: "/home/{{ ansible_user }}/appdata/{{ current_service }}"
    service_name: "{{ current_service }}"

- name: Verify required variables
  assert:
    that:
      - domain_name is defined
    fail_msg: "Required variables are not defined in vault.yml"

- name: Stop old Docker Compose stacks (if exist)
  community.docker.docker_container:
    name: "{{ service_name }}"
    state: absent
  ignore_errors: yes # Ignore errors if the stack does not exist

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  loop:
    - "{{ apps_path }}"
    - "{{ appdata_path }}"

- name: Generate Docker Compose configuration
  template:
    src: "../docker/{{ service_name }}/docker-compose.yml"
    dest: "{{ apps_path }}/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: Generate environment file
  template:
    src: "../docker/{{ service_name }}/.env.j2"
    dest: "{{ apps_path }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"

- name: Check if volume directory exists for the service
  stat:
    path: "../docker/{{ service_name }}/volume"
  register: volume_dir

- name: Debug volume directory status
  debug:
    msg: "Volume directory exists: {{ volume_dir.stat.exists }}, is directory: {{ volume_dir.stat.isdir | default('unknown') }}"

- name: Find all files in volume directory (if exists)
  find:
    paths: "../docker/{{ service_name }}/volume"
    file_type: file
  register: volume_files
  when: volume_dir.stat.exists and volume_dir.stat.isdir is defined and volume_dir.stat.isdir

- name: Debug found files in volume
  debug:
    msg: "Found files: {{ volume_files.files | map(attribute='path') | list }}"
  when: volume_files.files is defined and volume_files.files | length > 0

- name: Copy non-template volume files to appdata
  copy:
    src: "{{ file_item }}"
    dest: "{{ appdata_path }}/{{ file_item | basename }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  loop: "{{ volume_files.files | default([]) | map(attribute='path') | list }}"
  loop_control:
    loop_var: file_item
  when: file_item is not search("\\.j2$")
  ignore_errors: yes

- name: Debug copied non-template files
  debug:
    msg: "Copied non-template file: {{ file_item | basename }}"
  loop: "{{ volume_files.files | default([]) | map(attribute='path') | list }}"
  loop_control:
    loop_var: file_item
  when: file_item is not search("\\.j2$")

- name: Process Jinja2 templates in volume and save to appdata
  template:
    src: "{{ template_item }}"
    dest: "{{ appdata_path }}/{{ template_item | basename | regex_replace('\\.j2$', '') }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  loop: "{{ volume_files.files | default([]) | map(attribute='path') | list }}"
  loop_control:
    loop_var: template_item
  when: template_item is search("\\.j2$")

- name: Debug processed Jinja2 templates
  debug:
    msg: "Processed Jinja2 template: {{ template_item | basename | regex_replace('\\.j2$', '') }}"
  loop: "{{ volume_files.files | default([]) | map(attribute='path') | list }}"
  loop_control:
    loop_var: template_item
  when: template_item is search("\\.j2$")

- name: Start Docker Compose stack
  community.docker.docker_compose_v2:
    project_src: "{{ apps_path }}"
    files:
      - docker-compose.yml
    env_files:
      - "{{ apps_path }}/.env"
    state: present
    pull: always
    remove_orphans: true
