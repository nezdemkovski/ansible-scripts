- name: Define service paths
  set_fact:
    apps_path: "/home/{{ ansible_user }}/apps/{{ current_service }}"
    appdata_path: "/home/{{ ansible_user }}/appdata/{{ current_service }}"
    service_name: "{{ current_service }}"

- name: Verify required variables
  assert:
    that:
      - domain_name is defined
    fail_msg: "Required variables are not defined in vault.yml"

- name: Stop old Docker Compose stacks (if exist)
  community.docker.docker_container:
    name: "{{ service_name }}"
    state: absent
  ignore_errors: yes # Ignore errors if the stack does not exist

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  loop:
    - "{{ apps_path }}"
    - "{{ appdata_path }}"

- name: Check if volume directory exists for the service
  stat:
    path: "../docker/{{ service_name }}/volume"
  register: volume_dir

- name: Find all .j2 template files in volume directory
  find:
    paths: "../docker/{{ service_name }}/volume"
    patterns: "*.j2"
    recurse: yes
  register: j2_templates
  when: volume_dir.stat.exists and volume_dir.stat.isdir

- name: Process .j2 template files from volume directory
  template:
    src: "{{ item.path }}"
    dest: "{{ appdata_path }}/{{ item.path | regex_replace('^.*?volume/', '') | regex_replace('\.j2$', '') }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  with_items: "{{ j2_templates.files | default([]) }}"
  when: volume_dir.stat.exists and volume_dir.stat.isdir and j2_templates.matched | default(0) > 0

- name: Copy non-j2 volume files to appdata directory if volume directory exists
  copy:
    src: "../docker/{{ service_name }}/volume/"
    dest: "{{ appdata_path }}/"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: preserve
    force: "{{ overwrite_volume_files | default(true) }}"
    exclude: "*.j2"
  when: volume_dir.stat.exists and volume_dir.stat.isdir

- name: Generate Docker Compose configuration
  template:
    src: "../docker/{{ service_name }}/docker-compose.yml"
    dest: "{{ apps_path }}/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: Generate environment file
  template:
    src: "../docker/{{ service_name }}/.env.j2"
    dest: "{{ apps_path }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"

- name: Start Docker Compose stack
  community.docker.docker_compose_v2:
    project_src: "{{ apps_path }}"
    files:
      - docker-compose.yml
    env_files:
      - "{{ apps_path }}/.env"
    state: present
    pull: always
    remove_orphans: true
