---
services:
  postgres:
    image: postgres:17
    container_name: kestra-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${KESTRA_POSTGRES_DB}
      - POSTGRES_USER=${KESTRA_POSTGRES_USER}
      - POSTGRES_PASSWORD=${KESTRA_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${KESTRA_POSTGRES_DB} -U $${KESTRA_POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - kestra-postgres-data:/var/lib/postgresql/data
    networks:
      - kestra-net

  kestra:
    image: kestra/kestra:v1.0.6
    container_name: kestra
    pull_policy: always
    restart: unless-stopped
    # Note that this setup with a root user is intended for development purpose.
    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
    # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose
    user: "root"
    command: server standalone
    volumes:
      - ${APPDATA_PATH}:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/${KESTRA_POSTGRES_DB}
            driverClassName: org.postgresql.Driver
            username: ${KESTRA_POSTGRES_USER}
            password: ${KESTRA_POSTGRES_PASSWORD}
        kestra:
          server:
            basicAuth:
              enabled: false # False because I use authentik for basic auth
              username: "admin@kestra.io" # it must be a valid email address
              password: kestra
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
    labels:
      - traefik.enable=true

      # External host
      - traefik.http.routers.kestra-external.rule=Host(`${SUBDOMAIN_NAME}.${DOMAIN_NAME}`)
      - traefik.http.routers.kestra-external.entrypoints=websecure
      - traefik.http.routers.kestra-external.tls=true
      - traefik.http.routers.kestra-external.tls.certresolver=cloudflare
      - traefik.http.routers.kestra-external.middlewares=authentik-external@file
      - traefik.http.routers.kestra-external.service=kestra-external-service
      - traefik.http.services.kestra-external-service.loadbalancer.server.port=8080

      # Internal host
      - traefik.http.routers.kestra-internal.rule=Host(`${SUBDOMAIN_NAME}.${LOCAL_DOMAIN_NAME}`)
      - traefik.http.routers.kestra-internal.entrypoints=websecure
      - traefik.http.routers.kestra-internal.tls=true
      - traefik.http.routers.kestra-internal.middlewares=authentik@file
      - traefik.http.routers.kestra-internal.service=kestra-internal-service
      - traefik.http.services.kestra-internal-service.loadbalancer.server.port=8080
    # ports:
    #   - "8080:8080"
    #   - "8081:8081"
    depends_on:
      postgres:
        condition: service_started
    networks:
      - kestra-net
      - traefik-proxy
volumes:
  kestra-postgres-data:
    driver: local
networks:
  kestra-net:
    name: kestra-net
    driver: bridge
  traefik-proxy:
    external: true
